const TelegramApi = require('node-telegram-bot-api')

const token = '6049170650:AAHlwYiVi4Gt-AGu1pnXSGn3rK6QmsdtEVE'

const bot = new TelegramApi(token, {polling: true})

const CronJob = require('cron').CronJob;

const job = new CronJob(
    '00 9 * * *',
    function() {
        console.log('Good morning');
        return bot.sendMessage(-576852718, '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –ö–∞–∑–∏–Ω–æ!!')
    },
    null,
    true,
    'Europe/Moscow'
);
//–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ª—é–¥–µ–π –µ–ø—Ç–∞
let Me = 220815377; let nameMe = ' @b2b_daddy'; let MeTr = true; // –ü–∞—à–∞
let Semen = 60588441; let nameSemen = ' @Grafico_Sogly'; SemenTr = true; // –°–µ–º–µ–Ω
let D = 462415609; let nameD = ' @Axtra4an'; DTr = true; // –î–∞–Ω—è
let An = 314197836; let nameAn = ' @akapenkin'; AnTr = true; // –ê–Ω—Ä–µ–π
let Dima = 230680864; let nameDima = ' @DmitriyBagaev'; DimaTr = true; // –î–∏–º–∞
let Ant = 275234023; let nameAnt = ' @antnmorozov'; AntTr = true; // –ê–Ω—Ç–æ–Ω
let Il = 472281105; let nameIl = ' @Milk_Daddy'; IlTr = true; // –ò–ª—å—è



const tagOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–ö—É—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –ø–∞–∫ üö¨', callback_data: 'st'}],
            [{text: '–ö—É—Ä–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞–∫ üö¨', callback_data: 'rs'}],
            [{text: '–í—Å–µ –≤–º–µ—Å—Ç–µ üö¨', callback_data: 'all'}],
            [{text: '–ù–∞ –æ–±–µ–¥ üçΩ', callback_data: 'ob'}],
            [{text: '–ù–∞ –ø–æ–¥—Ç—è–≥ ü´Ç', callback_data: 'pdg'}],
            [{text: '–ö–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç? ‚ùå', callback_data: 'net'}],
        ]
    })
}

const netOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{text: '–ü–∞—à–∏', callback_data: 'P'}, {text: '–°–µ–º—ë–Ω–∞', callback_data: 'S'}],
            [{text: '–î–∞–Ω–∏', callback_data: 'D'}, {text: '–ê–Ω–¥—Ä–µ—è', callback_data: 'An'}],
            [{text: '–î–∏–º—ã', callback_data: 'Di'}, {text: '–ò–ª—å–∏', callback_data: 'I'}],
            [{text: '–ê–Ω—Ç–æ–Ω–∞', callback_data: 'Ant'}],
        ]
    })
}

const start = () => {

    bot.setMyCommands([
        {command: '/start@Pokyr_Casino_Bot', description: '–ù–∞—á–∞–ª–æ –ø–æ–∫—É—Ä–∞'},
        {command: '/version@Pokyr_Casino_Bot', description: '–í–µ—Ä—Å–∏—è –±–æ—Ç–∞'},
        {command: '/tag@Pokyr_Casino_Bot', description: '–¢—ç–≥–Ω—É—Ç—å —á–µ–ª–∏–∫–æ–≤'},
        {command: '/updates', description: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'},]
    )


    bot.on( 'message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;
        const data = msg.data;
        const { exec } = require("child_process");

        console.log(msg)

        if (text === '/start@Pokyr_Casino_Bot' || text === '/start'){
            await bot.sendSticker(chatId,'CAACAgIAAxkBAAEHkAlj2-WX-W5KVuWN8Y9P4gL4Z8HW9QACYAADEWApDfEI5RIU0zAsLgQ')
            return bot.sendMessage(chatId, '–ù—É —á—Ç–æ, –ø–æ–∫—É—Ä–∏—Ç—å —Ö–æ—Ç–∏–º?')

        }

        if (text === '/—Åmd'){

            exec("ls -la", (error, stdout, stderr) => {
                if (error) {
                    console.log(`error: ${error.message}`);
                    return;
                }
                if (stderr) {
                    console.log(`stderr: ${stderr}`);
                    return;
                }
                console.log(`stdout: ${stdout}`);
            });
            return bot.sendMessage(chatId, '–û—Ç—Ä–∞–±–æ—Ç–∞–ª–æ')

        }

        if (text === '/tag@Pokyr_Casino_Bot' || text === '/tag'){

            return bot.sendMessage(chatId,'–ß–µ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º –Ω–∞—Ö—É–π? –ö–æ–≥–æ —Ç—ç–≥–∞—Ç—å?', tagOptions)
        }

        if (text === '/version@Pokyr_Casino_Bot'|| text === '/version'){
            return bot.sendMessage(chatId, '–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 0.66.7 beta Debian 94.228.112.55 root ')
        }

        if (text === '/updates'|| text === '/updates@Pokyr_Casino_Bot'){

            await bot.sendMessage(chatId,'0.66.7 | 8.02.23 | –î–æ–±–∞–≤–ª–µ–Ω–æ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ')
            await bot.sendMessage(chatId,'–≠–¢–û –°–ê–ú–û–ï –ï–ë–ï–ô–®–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –≤–∞—Å –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ. –í–Ω–∏–º–µ–Ω–∏–µ! –ï—Å–ª–∏ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ—Ñ–∏—Å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–µ—Ç–µ –±–æ—Ç—É –≤ –ª—Å "–±–æ—Ç —è –≤–µ—Ä–Ω—É–ª—Å—è" –∏ –≤–∞—Å —Å–Ω–æ–º–∞ –±—É–¥–µ—Ç —Ç—ç–≥–∞—Ç—å.')
            return  bot.sendMessage(chatId,'–ê–Ω—Ç–æ–Ω —Ä–∞–∑–≥–∞–¥–∞–ª –ø–∞—Å—Ö–∞–ª–∫—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–∏–≤–æ! üç∫')


        }

        if (text === '–ë–æ—Ç —è –≤–µ—Ä–Ω—É–ª—Å—è' || text === '–±–æ—Ç —è –≤–µ—Ä–Ω—É–ª—Å—è'){

            if (chatId === Me){

                await (MeTr = true)
                await (nameMe = ' @b2b_daddy')
            }

            if (chatId === Semen){

                await (SemenTr = true)
                await (nameSemen = ' @Grafico_Sogly')
            }

            if (chatId === D){

                await (DTr = true)
                await (nameD = ' @Axtra4an')
            }

            if (chatId === An){

                await (AnTr = true)
                await (nameAn = ' @akapenkin')
            }

            if (chatId === Dima){

                await (DimaTr = true)
                await (nameDima = '@DmitriyBagaev')
            }

            if (chatId === Ant){

                await (AntTr = true)
                await (nameAnt = '@antnmorozov')
            }

            if (chatId === Il){

                await (IlTr = true)
                await (nameIl = ' @Milk_Daddy')
            }

            return  bot.sendMessage(chatId,'–ó–¥–æ—Ä–æ–≤–æ, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ù—É —á—ë, –¥–∞–≤–∞–π –æ –¥–µ–ª–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º?')


        }

        return bot.sendMessage(chatId, '–Ø –Ω–∏—Ö—É—è –Ω–µ –ø–æ–Ω—è–ª. –ß–µ —Ç–µ–±–µ –Ω–∞–¥–æ?')

    })

    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        // –ù–∏–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è –∏ —Ç—ç–≥ + –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ –ª—Å
        // –ö—É—Ä–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–æ–º
        if (data === 'st'){

            if (MeTr === true) {
                await bot.sendMessage(Me, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–æ–º, —á–µ–ª.')
            }
            else {
                await (nameMe = ' ')
            }

            if (SemenTr === true) {
                await bot.sendMessage(Semen, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–æ–º, Semen.')
            }
            else {
                await (nameSemen = ' ')
            }

            if (AntTr === true) {
                await bot.sendMessage(Ant, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–æ–º, –ê–Ω—Ç–æ–Ω!')
            }
            else {
                await (nameAnt = ' ')
            }

            if (IlTr === true) {
                await bot.sendMessage(Il, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–æ–º, –ò–ª—å—è.')
            }
            else {
                await (nameIl = ' ')
            }

            return bot.sendMessage(chatId, nameMe + nameSemen + nameAnt + nameIl + ' –∫—É—Ä–µ–Ω–∏–µ')

        }
        // –ö—É—Ä–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞–∫–æ–º
        if (data === 'rs'){

            if (MeTr === true) {
                await bot.sendMessage(Me, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞–∫–æ–º, —á–µ–ª.')
            }
            else {
                await (nameMe = ' ')
            }

            if (SemenTr === true) {
                await bot.sendMessage(Semen, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞–∫–æ–º, Semen.')
            }
            else {
                await (nameSemen = ' ')
            }

            if (AntTr === true) {
                await bot.sendMessage(Ant, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞–∫–æ–º, –ê–Ω—Ç–æ–Ω!')
            }
            else {
                await (nameAnt = ' ')
            }

            if (IlTr === true) {
                await bot.sendMessage(Il, '–ü–æ–π–¥—ë–º –∫—É—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–∞–∫–æ–º, –ò–ª—å—è.')
            }
            else {
                await (nameIl = ' ')
            }

            if (DTr === true) {
                await bot.sendMessage(D, '–î–∞–Ω—è, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–∏—Ç—å.')
            }
            else {
                await (nameD = ' ')
            }

            if (DimaTr === true) {
                await bot.sendMessage(Dima, '–î–∏–º–∞, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–∏—Ç—å.')
            }
            else {
                await (nameDima = ' ')
            }

            return bot.sendMessage(chatId, nameMe + nameSemen + nameAnt + nameIl + nameD + nameDima + ' –∫—É—Ä–µ–Ω–∏–µ')


        }
        // –ö—É—Ä–µ–Ω–∏–µ –≤—Å–µ –≤–º–µ—Å—Ç–µ
        if (data === 'all'){

            if (MeTr === true) {
                await bot.sendMessage(Me, '–ò–¥—ë–º –∫—É—Ä–∏—Ç—å –≤—Å–µ –Ω–∞—Ö—É–π')
            }
            else {
                await (nameMe = ' ')
            }

            if (SemenTr === true) {
                await bot.sendMessage(Semen, '–ò–¥—ë–º –∫—É—Ä–∏—Ç—å –≤—Å–µ –Ω–∞—Ö—É–π')
            }
            else {
                await (nameSemen = ' ')
            }

            if (AntTr === true) {
                await bot.sendMessage(Ant, '–ò–¥—ë–º –∫—É—Ä–∏—Ç—å –≤—Å–µ –Ω–∞—Ö—É–π, –ê–Ω—Ç–æ–Ω!')
            }
            else {
                await (nameAnt = ' ')
            }

            if (IlTr === true) {
                await bot.sendMessage(Il, '–ò–¥—ë–º –∫—É—Ä–∏—Ç—å –≤—Å–µ –Ω–∞—Ö—É–π')
            }
            else {
                await (nameIl = ' ')
            }

            if (DTr === true) {
                await bot.sendMessage(D, '–î–∞–Ω—è, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–∏—Ç—å. –í—Å–µ –≤–º–µ—Å—Ç–µ!')
            }
            else {
                await (nameD = ' ')
            }

            if (DimaTr === true) {
                await bot.sendMessage(Dima, '–î–∏–º–∞, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–∏—Ç—å. –í—Å–µ –≤–º–µ—Å—Ç–µ!')
            }
            else {
                await (nameDima = ' ')
            }

            if (AnTr === true) {
                await bot.sendMessage(An, '–ê–Ω–¥—Ä—é—à–∞, –ø–æ–≥–Ω–∞–ª–∏ –∫—É—Ä–∏—Ç—å.')
            }
            else {
                await (nameAn = ' ')
            }

            return bot.sendMessage(chatId, nameMe + nameSemen + nameAnt + nameIl + nameD + nameDima + nameAn +' –∫—É—Ä–µ–Ω–∏–µ –≤—Å–µ –Ω–∞—Ö—É–π')

        }
        // –æ–±–µ–¥
        if (data === 'ob'){

            if (MeTr === true) {
                await bot.sendMessage(Me, '–£—à–ª–∏ –Ω–∞ –æ–±–µ–¥')
            }
            else {
                await (nameMe = ' ')
            }

            if (SemenTr === true) {
                await bot.sendMessage(Semen, '–ò–¥—ë–º –≤—Å–∞—Å—ã–≤–∞—Ç—å –µ–¥—É, –°—ë–º–∞')
            }
            else {
                await (nameSemen = ' ')
            }

            if (AntTr === true) {
                await bot.sendMessage(Ant, '–ò–¥—ë–º –Ω–∞ –æ–±–µ–¥, –ê–Ω—Ç–æ–Ω!')
            }
            else {
                await (nameAnt = ' ')
            }

            if (IlTr === true) {
                await bot.sendMessage(Il, '–ò–¥—ë–º –Ω–∞ –æ–±–µ–¥!')
            }
            else {
                await (nameIl = ' ')
            }

            if (DTr === true) {
                await bot.sendMessage(D, '–î–∞–Ω—è, –∏–¥—ë–º –Ω–∞ –æ–±–µ–¥.')
            }
            else {
                await (nameD = ' ')
            }

            if (AnTr === true) {
                await bot.sendMessage(An, '–ê–Ω–¥—Ä—é—à–∞, –ø–æ–≥–Ω–∞–ª–∏ –Ω–∞ –æ–±–µ–¥.')
            }
            else {
                await (nameAn = ' ')
            }

            return bot.sendMessage(chatId, nameSemen + nameAnt + nameIl + nameD + nameAn +' –∏–¥—ë–º –Ω–∞ –æ–±–µ–¥')


        }
        // –ü–æ–¥—Ç—è–≥
        if (data === 'pdg'){

            if (MeTr === true) {
                await bot.sendMessage(Me, '–ü–æ–¥—Ç—è–≥')
            }
            else {
                await (nameMe = ' ')
            }

            if (SemenTr === true) {
                await bot.sendMessage(Semen, '–î–∞–≤–∞–π, –ø–æ–π–¥—ë–º –Ω–∞–∫–∞—á–∞–µ–º —Ç–≤–æ–∏ —Ö–∏–ª–µ–Ω—å–∫–∏–µ —Ä—É—á–∫–∏')
            }
            else {
                await (nameSemen = ' ')
            }

            if (AntTr === true) {
                await bot.sendMessage(Ant, '–ü–æ–¥—Ç—è–≥!')
            }
            else {
                await (nameAnt = ' ')
            }

            if (IlTr === true) {
                await bot.sendMessage(Il, '–ü–æ–¥—Ç—è–≥!')
            }
            else {
                await (nameIl = ' ')
            }


            if (AnTr === true) {
                await bot.sendMessage(An,'–ü–æ–¥—Ç—è–≥?')
            }
            else {
                await (nameAn = ' ')
            }

            return bot.sendMessage(chatId, nameMe + nameSemen + nameAnt + nameIl + nameAn +' –ø–æ–¥—Ç—è–≥ –∂–µ—Å—Ç–∫–∏–π')


        }


    })


        //–í—ã–∑–æ–≤ –∫–Ω–æ–ø–æ–∫ –∫–æ–≥–æ –Ω–µ—Ç –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    bot.on('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (data === 'net'){

            return bot.sendMessage(chatId,'–ö–æ–≥–æ –Ω–µ—Ç?', netOptions)

        }

        if (data === 'P'){

            await bot.sendMessage(chatId,'–ü–∞—à–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (MeTr = false)

        }

        if (data === 'S'){

            await bot.sendMessage(chatId,'–°–µ–º—ë–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (SemenTr = false)

        }

        if (data === 'D'){

            await bot.sendMessage(chatId,'–î–∞–Ω–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (DTr = false)

        }

        if (data === 'An'){

            await bot.sendMessage(chatId,'–ê–Ω–¥—Ä–µ—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (AnTr = false)

        }

        if (data === 'Di'){

            await bot.sendMessage(chatId,'–î–∏–º—ã —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (DimaTr = false)

        }

        if (data === 'Ant'){

            await bot.sendMessage(chatId,'–ê–Ω—Ç–æ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (AntTr = false)

        }

        if (data === 'I'){

            await bot.sendMessage(chatId,'–ò–ª—å–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –≤ –æ—Ñ–∏—Å–µ')
            return (IlTr = false)

        }


    })

}

start()